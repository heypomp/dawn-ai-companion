name: 测试套件

on:
  push:
    branches: [ main, free-version, develop ]
  pull_request:
    branches: [ main, free-version ]

jobs:
  unit-tests:
    name: 单元测试
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
      
      - name: 设置 Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
      
      - name: 安装 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
      
      - name: 安装依赖
        run: pnpm install --frozen-lockfile
      
      - name: 运行代码检查
        run: pnpm lint
      
      - name: 运行单元测试
        run: pnpm test -- --coverage --testPathPattern="test\\.ts|test\\.tsx"
        env:
          NODE_ENV: test
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_TEST_URL || 'https://test.supabase.co' }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_TEST_ANON_KEY || 'test-anon-key' }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_TEST_SERVICE_KEY || 'test-service-key' }}
          CREEM_API_KEY: ${{ secrets.CREEM_TEST_API_KEY || 'test-creem-key' }}
          CREEM_WEBHOOK_SECRET: ${{ secrets.CREEM_TEST_WEBHOOK_SECRET || 'test-webhook-secret' }}
          CREEM_MOCK_MODE: true
      
      - name: 上传覆盖率报告
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unit-tests
          name: unit-tests-${{ matrix.node-version }}

  integration-tests:
    name: 集成测试
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
      
      - name: 设置 Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          cache: 'pnpm'
      
      - name: 安装 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
      
      - name: 安装依赖
        run: pnpm install --frozen-lockfile
      
      - name: 等待数据库就绪
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "等待 PostgreSQL..."
            sleep 2
          done
      
      - name: 运行集成测试
        run: pnpm test:integration
        env:
          NODE_ENV: test
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_TEST_URL || 'http://localhost:54321' }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_TEST_ANON_KEY || 'test-anon-key' }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_TEST_SERVICE_KEY || 'test-service-key' }}
          CREEM_API_KEY: ${{ secrets.CREEM_TEST_API_KEY || 'test-creem-key' }}
          CREEM_WEBHOOK_SECRET: ${{ secrets.CREEM_TEST_WEBHOOK_SECRET || 'test-webhook-secret' }}
          POSTGRES_URL: postgresql://postgres:postgres@localhost:5432/test_db
      
      - name: 上传集成测试覆盖率
        uses: codecov/codecov-action@v3
        with:
          flags: integration-tests
          name: integration-tests

  security-tests:
    name: 安全测试
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
      
      - name: 设置 Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          cache: 'pnpm'
      
      - name: 安装 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
      
      - name: 安装依赖
        run: pnpm install --frozen-lockfile
      
      - name: 运行安全审计
        run: pnpm audit
      
      - name: 运行安全相关测试
        run: pnpm test -- --testPathPattern="security|advanced" --testNamePattern="安全|防护|攻击"
        env:
          NODE_ENV: test

  test-summary:
    name: 测试总结
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, security-tests]
    if: always()
    
    steps:
      - name: 检查测试结果
        run: |
          echo "单元测试: ${{ needs.unit-tests.result }}"
          echo "集成测试: ${{ needs.integration-tests.result }}"
          echo "安全测试: ${{ needs.security-tests.result }}"
          
          if [[ "${{ needs.unit-tests.result }}" != "success" ]]; then
            echo "❌ 单元测试失败"
            exit 1
          fi
          
          if [[ "${{ needs.integration-tests.result }}" != "success" ]]; then
            echo "❌ 集成测试失败" 
            exit 1
          fi
          
          if [[ "${{ needs.security-tests.result }}" != "success" ]]; then
            echo "⚠️ 安全测试失败"
            # 不阻塞部署，但发出警告
          fi
          
          echo "✅ 所有关键测试通过"
      
      - name: 测试通过通知
        if: success()
        run: echo "🎉 所有测试套件执行完成！"